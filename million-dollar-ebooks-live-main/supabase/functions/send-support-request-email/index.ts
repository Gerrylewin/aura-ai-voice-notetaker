
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const RESEND_API_KEY = Deno.env.get('RESEND_API_KEY')

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

interface SupportRequestData {
  email: string
  subject: string
  category: string
  priority: string
  description: string
  userName: string
  supportRequestId: string
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  if (!RESEND_API_KEY) {
    console.error('RESEND_API_KEY not configured')
    return new Response(
      JSON.stringify({ error: 'RESEND_API_KEY not configured' }),
      { 
        status: 500, 
        headers: { 'Content-Type': 'application/json', ...corsHeaders } 
      }
    )
  }

  try {
    const body = await req.text()
    console.log('Received support request:', body)
    
    if (!body || body.trim() === '') {
      throw new Error('Empty request body')
    }

    const { email, subject, category, priority, description, userName, supportRequestId }: SupportRequestData = JSON.parse(body)
    
    console.log('Processing support request:', { email, subject, category, priority })

    if (!email || !subject || !description) {
      throw new Error('Missing required fields: email, subject, or description')
    }

    // Email to admin (Isaac) only
    const adminEmailPayload = {
      from: 'Million Dollar eBooks Support <noreply@dollarebooks.app>',
      to: ['isaac.g.lewin@gmail.com'],
      subject: `ðŸš¨ New Support Request: ${subject}`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #dc2626;">New Support Request Submitted</h2>
          
          <div style="background: #f9fafb; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="margin-top: 0; color: #374151;">Request Details</h3>
            <p><strong>Subject:</strong> ${subject}</p>
            <p><strong>From:</strong> ${userName} (${email})</p>
            <p><strong>Category:</strong> ${category || 'Not specified'}</p>
            <p><strong>Priority:</strong> ${priority}</p>
            <p><strong>Request ID:</strong> ${supportRequestId}</p>
          </div>

          <div style="background: #fff; padding: 20px; border: 1px solid #e5e7eb; border-radius: 8px;">
            <h4 style="margin-top: 0; color: #374151;">Description:</h4>
            <p style="white-space: pre-wrap; line-height: 1.6;">${description}</p>
          </div>

          <div style="margin-top: 20px; padding: 15px; background: #fef3c7; border-radius: 8px;">
            <p style="margin: 0; color: #92400e;">
              <strong>Action Required:</strong> A private chat has been automatically created with this user. Please check the app to respond.
            </p>
          </div>

          <p style="margin-top: 20px; color: #6b7280; font-size: 14px;">
            This email was automatically generated by the Million Dollar eBooks support system.
          </p>
        </div>
      `,
    }

    console.log('Sending admin notification email...')
    const adminResponse = await fetch('https://api.resend.com/emails', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${RESEND_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(adminEmailPayload),
    })

    const adminResponseText = await adminResponse.text()
    console.log('Admin email response:', adminResponseText)

    if (!adminResponse.ok) {
      throw new Error(`Failed to send admin email: ${adminResponse.status} ${adminResponse.statusText} - ${adminResponseText}`)
    }

    console.log('Admin email sent successfully')

    return new Response(
      JSON.stringify({ 
        success: true, 
        message: 'Support request notification sent to admin',
        adminEmailId: JSON.parse(adminResponseText).id
      }),
      { 
        headers: { 'Content-Type': 'application/json', ...corsHeaders } 
      }
    )
  } catch (error) {
    console.error('Error in send-support-request-email function:', error)
    return new Response(
      JSON.stringify({ 
        error: error.message,
        details: 'Check function logs for more information'
      }),
      { 
        status: 500, 
        headers: { 'Content-Type': 'application/json', ...corsHeaders } 
      }
    )
  }
})
